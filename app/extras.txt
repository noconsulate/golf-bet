 ** postgresql RCP **

-- new match 
create or replace function new_match(
  players integer,
  points integer,
  is_18_holes boolean,
  is_classic_scoring boolean,
  creator uuid,
  
  out match_id int,
  out score_id int
)
-- returns integer
language plpgsql
as $$
declare
  match_id_ret integer;
  score_id_ret int;
 
begin
  insert into match(players, points, is_18_holes, is_classic_scoring, creator, players_joined)
  values(players, points, is_18_holes, is_classic_scoring, creator, 1)
  returning id into match_id_ret;

  match_id = match_id_ret;
  
  -- create score
  
  insert into score(match_id, player_num, player_id)
  values(match_id, 1, creator)
  returning id into score_id_ret;
  
  score_id = score_id_ret;

end; $$;

-- join match
create or replace function join_match(
  match_id int, 
  player_id uuid,
  out score_id int,
  out players_joined_out int
)

language plpgsql
as $$
declare
match_rec record;
my_player_num int;
score_id_ret int;
begin
	-- get info from match
	select players, players_joined
    from match
    where id = match_id
    into match_rec;
    
    -- if there's room in the game, continue
    
    if match_rec.players_joined < match_rec.players then 	
    
    	my_player_num = match_rec.players_joined + 1;
        players_joined_out = my_player_num;
        
        -- create new scores row
        insert into score(match_id, player_num, player_id)
        values(match_id, my_player_num, player_id)
        returning id into score_id_ret;
    
    	score_id = score_id_ret;
        
        -- update players_joined in match 
        update match
        set players_joined = my_player_num
        where id = match_id;
		    
  	else
    	score_id = 0;
    end if;
    
end
$$

